console.log("Loaded token module");

var secret = 'aaaAAAAbbbbBBBBZzzzZZ';
var crypto = require('crypto');

var validMillis = 1800 * 1000;
var dal = require(__dirname + '/../models/models.js');

function md5( s ) {
    return crypto.createHash('md5').update( s ).digest('hex');
}

function parse( tokenString ) {
    var decoded = new Buffer(tokenString, 'base64').toString('ascii');
    var pattern = /^([0-9a-f]+):(\d+):([0-9a-f]+)$/;

    console.log("Start testing. decoded:" + decoded );

    var matches = decoded.match(pattern);
    if(!matches)
        return null;
    console.log("  ... passed regexp");

    var userId    = matches[1];
    var timeStamp = matches[2];
    var md5Hash   = matches[3];

    if(md5Hash != md5( userId + ':' + timeStamp + secret ))
        return null;
    console.log("  ... passed md5");

    if(Date.now() > parseInt(timeStamp))
        return null;
    console.log("  ... passed date");
    console.log("Parse OK");

    return userId;
}

function generate( user ) {
    var userId = user._id.toString();
    var timeStamp = Date.now() + validMillis;
    var bufstring = userId + ':' + timeStamp;
    var md5Hash = md5( bufstring + secret );

    bufstring += ':' + md5Hash;

    console.log("bufstring is: " + bufstring );
    var buf = new Buffer( bufstring );

    console.log("Buffer length " + buf.length);
    console.log("bufbase64 is: " + buf.toString('base64') );
    return buf.toString('base64');
}

function middleWare( req, res, next ) {
    var token = null;

    if( req.cookies && req.cookies.token) {
        token = req.cookies.token;
    }

    if( req.body && req.body.token)
        token = req.body.token;
   
    
    if( token ) {
        var uid = parse( token );
        if(uid) {
            dal.userLookupByUid( uid, function( error, user ) {
                    if( error ) {
                        console.log("No user found");
                        delete req.user;
                    }
                    else {
                        console.log("Found user");
                        req.user = user;
                    }
                    if(next)
                        next();

                });

            return;
        }
    }
    else
        console.log("No token found");

    if(next)
        next();
}

exports.parse = parse;
exports.generate = generate;
exports.middleWare = middleWare;
